/* StarPU --- Runtime system for heterogeneous multicore architectures.
 *
 * Copyright (C) 2009-2011  Universit√© de Bordeaux
 * Copyright (C) 2010, 2011, 2012, 2013, 2017  CNRS
 * Copyright (C) 2011, 2012 Inria
 *
 * StarPU is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or (at
 * your option) any later version.
 *
 * StarPU is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * See the GNU Lesser General Public License in COPYING.LGPL for more details.
 */

/*! \defgroup API_Parallel_Tasks Parallel Tasks

\fn int starpu_combined_worker_get_size(void)
\ingroup API_Parallel_Tasks
Return the size of the current combined worker, i.e. the total number
of cpus running the same task in the case of ::STARPU_SPMD parallel
tasks, or the total number of threads that the task is allowed to
start in the case of ::STARPU_FORKJOIN parallel tasks.

\fn int starpu_combined_worker_get_rank(void)
\ingroup API_Parallel_Tasks
Return the rank of the current thread within the combined worker. Can
only be used in ::STARPU_FORKJOIN parallel tasks, to know which part
of the task to work on.

\fn unsigned starpu_combined_worker_get_count(void)
\ingroup API_Parallel_Tasks
Return the number of different combined workers.

\fn int starpu_combined_worker_get_id(void)
\ingroup API_Parallel_Tasks
Return the identifier of the current combined worker.

\fn int starpu_combined_worker_assign_workerid(int nworkers, int workerid_array[])
\ingroup API_Parallel_Tasks
Register a new combined worker and get its identifier

\fn int starpu_combined_worker_get_description(int workerid, int *worker_size, int **combined_workerid)
\ingroup API_Parallel_Tasks
Get the description of a combined worker

\fn int starpu_combined_worker_can_execute_task(unsigned workerid, struct starpu_task *task, unsigned nimpl)
\ingroup API_Parallel_Tasks
Variant of starpu_worker_can_execute_task() compatible with combined
workers

\fn void starpu_parallel_task_barrier_init(struct starpu_task *task, int workerid)
\ingroup API_Parallel_Tasks
Initialise the barrier for the parallel task, and dispatch the task
between the different workers of the given combined worker.

\fn void starpu_parallel_task_barrier_init_n(struct starpu_task *task, int worker_size)
\ingroup API_Parallel_Tasks
Initialise the barrier for the parallel task, to be pushed to \p worker_size
workers (without having to explicit a given combined worker).

*/

