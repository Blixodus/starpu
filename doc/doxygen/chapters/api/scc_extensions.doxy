/* StarPU --- Runtime system for heterogeneous multicore architectures.
 *
 * Copyright (C) 2010-2013,2015,2017                      CNRS
 * Copyright (C) 2009-2011,2014                           Universit√© de Bordeaux
 * Copyright (C) 2011-2012                                Inria
 *
 * StarPU is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or (at
 * your option) any later version.
 *
 * StarPU is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * See the GNU Lesser General Public License in COPYING.LGPL for more details.
 */

/*! \defgroup API_SCC_Extensions SCC Extensions

\def STARPU_USE_SCC
\ingroup API_SCC_Extensions
Defined when StarPU has been installed with SCC support.
It should be used in your code to detect the availability of SCC.

\def STARPU_MAXSCCDEVS
\ingroup API_SCC_Extensions
Define the maximum number of SCC devices that are
supported by StarPU.

\typedef starpu_scc_func_symbol_t
\ingroup API_SCC_Extensions
Type for SCC function symbols

\fn int starpu_scc_register_kernel(starpu_scc_func_symbol_t *symbol, const char *func_name)
\ingroup API_SCC_Extensions
Initiate a lookup on each SCC device to find the adress of the
function named \p func_name, store them in the global array kernels
and return the index in the array through \p symbol.

\fn starpu_scc_kernel_t starpu_scc_get_kernel(starpu_scc_func_symbol_t symbol)
\ingroup API_SCC_Extensions
If success, return the pointer to the function defined by \p symbol on
the device linked to the called device. This can for instance be used
in a starpu_scc_func_symbol_t implementation.

*/
