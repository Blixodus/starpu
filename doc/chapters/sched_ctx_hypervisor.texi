@c -*-texinfo-*-

@c This file is part of the StarPU Handbook.
@c Copyright (C) 2011, 2012 Institut National de Recherche en Informatique et Automatique
@c See the file starpu.texi for copying conditions.

@cindex Scheduling Context Hypervisor

StarPU proposes a platform for constructing Scheduling Contexts, for deleting and modifying them dynamically.
A parallel kernel, can thus be isolated into a scheduling context and interferences between several parallel kernels are avoided.
If the user knows exactly how many workers each scheduling context needs, he can assign them to the contexts at their creation time or modify them during the execution of the program.

The Scheduling Context Hypervisor Plugin is available for the users who do not dispose of a regular parallelism and who need to resize the contexts according to the behavior of the parallel kernel.
The Hypervisor receives information concerning the execution of the tasks, the efficiency of the resources, etc. from StarPU and it decides accordingly when and how the contexts it manages can be resized.
Basic strategies of resizing scheduling contexts already exist but a platform for implementing additional custom ones is available.

@menu
* Performance Counters::              			StarPU provides information to the Hypervisor through performance counters
* Registering Scheduling Contexts to the hypervisor:: 	Contexts have to register to the hypervisor
* The user's input in the resizing process:: 		The user can help the hypervisor decide how to resize
* Defining a new hypervisor policy::      		New Policies can be implemented
@end menu

@node Performance Counters
@section Performance Counters

StarPU provides a series of performance counters which are used by the Hypervisor in the resize decision taking process. 

@deftp {Data Type} {struct starpu_performance_counters}
@anchor{struct starpu_performance_counters}

@table @asis
@item @code{void (*notify_idle_cycle)(unsigned sched_ctx, int worker, double idle_time)}
Informs the hypervisor for how long a worker has been idle in the specified context
@item @code{void (*notify_idle_end)(unsigned sched_ctx, int worker)}
Informs the hypervisor that after a period of idle, the worker has just executed a task in the specified context.
The idle counter it though reset.
@item @code{void (*notify_pushed_task)(unsigned sched_ctx, int worker)}
Notifies the hypervisor a task has been scheduled on the queue of the worker corresponding to the specified context
@item @code{void (*notify_poped_task)(unsigned sched_ctx, int worker, double flops)}
Informs the hypervisor a task executing a specified number of instructions has been poped from the worker
@item @code{void (*notify_post_exec_hook)(unsigned sched_ctx, int taskid)}
Notifies the hypervisor a task has just been executed

@end table
@end deftp

These performance counters are created at the initialization of the hypervisor, and contexts that have to trigger information sending towards the Hypervisor, have to receive them as parameter at their creation time.

@node Registering Scheduling Contexts to the hypervisor
@section Registering Scheduling Contexts to the hypervisor

@node The user's input in the resizing process
@section The user's input in the resizing process

@node Defining a new hypervisor policy
@section Defining a new hypervisor policy

@c Local Variables:
@c TeX-master: "../starpu.texi"
@c ispell-local-dictionary: "american"
@c End:
